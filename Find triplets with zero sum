#include <iostream>
#include <algorithm> // For sort function

bool findTriplets(int arr[], int n) {
    // Sort the array
    std::sort(arr, arr + n);
    
    // Loop through the array
    for (int i = 0; i < n - 2; i++) {
        // Two pointers approach
        int left = i + 1;       // Start just after the current element
        int right = n - 1;      // Start from the end of the array
        
        while (left < right) {
            int sum = arr[i] + arr[left] + arr[right];
            
            // If we find a triplet with a sum of 0
            if (sum == 0) {
                return true;
            }
            // If sum is less than 0, move left pointer to increase the sum
            else if (sum < 0) {
                left++;
            }
            // If sum is greater than 0, move right pointer to decrease the sum
            else {
                right--;
            }
        }
    }
    
    // If no triplet found, return false
    return false;
}

int main() {
    int arr[] = {0, -1, 2, -3, 1};
    int n = sizeof(arr) / sizeof(arr[0]);

    if (findTriplets(arr, n)) {
        std::cout << "Triplet with zero sum exists." << std::endl;
    } else {
        std::cout << "No triplet with zero sum exists." << std::endl;
    }

    return 0;
}
