#include <iostream>
#include <vector>
using namespace std;

vector<int> subarraySum(vector<int> &arr, int target) {
    int n = arr.size();
    int start = 0, sum = 0;
    
    // Traverse the array with the `end` pointer
    for (int end = 0; end < n; end++) {
        // Add current element to the sum
        sum += arr[end];

        // Shrink the window until the sum is less than or equal to the target
        while (sum > target && start < end) {
            sum -= arr[start];
            start++;
        }

        // Check if the sum equals the target
        if (sum == target) {
            return {start + 1, end + 1}; // Return 1-based indices
        }
    }
    
    // If no subarray is found
    return {-1};
}

int main() {
    vector<int> arr1 = {1, 2, 3, 7, 5};
    int target1 = 12;
    vector<int> result1 = subarraySum(arr1, target1);
    cout << "Result (Test Case 1): [" << result1[0] << ", " << result1[1] << "]" << endl;

    vector<int> arr2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int target2 = 15;
    vector<int> result2 = subarraySum(arr2, target2);
    cout << "Result (Test Case 2): [" << result2[0] << ", " << result2[1] << "]" << endl;

    vector<int> arr3 = {7, 2, 1};
    int target3 = 2;
    vector<int> result3 = subarraySum(arr3, target3);
    cout << "Result (Test Case 3): [" << result3[0] << ", " << result3[1] << "]" << endl;

    vector<int> arr4 = {5, 3, 4};
    int target4 = 2;
    vector<int> result4 = subarraySum(arr4, target4);
    cout << "Result (Test Case 4): [" << result4[0] << "]" << endl;

    return 0;
}
