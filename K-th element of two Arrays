#include <iostream>
#include <vector>
#include <algorithm>

int kthElement(int k, std::vector<int>& arr1, std::vector<int>& arr2) {
    int n1 = arr1.size();
    int n2 = arr2.size();
    
    // Ensure arr1 is the smaller array to minimize search space
    if (n1 > n2) {
        return kthElement(k, arr2, arr1);
    }
    
    int low = std::max(0, k - n2);
    int high = std::min(k, n1);
    
    while (low <= high) {
        int cut1 = (low + high) / 2;
        int cut2 = k - cut1;
        
        int l1 = (cut1 == 0) ? INT_MIN : arr1[cut1 - 1];
        int l2 = (cut2 == 0) ? INT_MIN : arr2[cut2 - 1];
        int r1 = (cut1 == n1) ? INT_MAX : arr1[cut1];
        int r2 = (cut2 == n2) ? INT_MAX : arr2[cut2];
        
        // Check if we found the correct split
        if (l1 <= r2 && l2 <= r1) {
            return std::max(l1, l2);
        }
        // Move search space
        else if (l1 > r2) {
            high = cut1 - 1;
        } else {
            low = cut1 + 1;
        }
    }
    
    return -1; // Return -1 if not found, but should not occur as per constraints
}

int main() {
    std::vector<int> arr1 = {2, 3, 6, 7, 9};
    std::vector<int> arr2 = {1, 4, 8, 10};
    int k = 5;
    
    int result = kthElement(k, arr1, arr2);
    std::cout << "The " << k << "th element is: " << result << std::endl;

    return 0;
}
