#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

// Function to detect and remove a loop in the linked list
void removeLoop(Node* head) {
    if (!head || !head->next)
        return;
    
    Node *slow = head, *fast = head;

    // Step 1: Detect loop using Floydâ€™s Cycle Detection
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) {
            break;
        }
    }

    // Step 2: If no loop is found, return
    if (slow != fast)
        return;

    // Step 3: Find the start of the loop
    slow = head;
    if (slow == fast) {  // If the loop starts at the head
        while (fast->next != slow) {
            fast = fast->next;
        }
    } else {  // If the loop is elsewhere in the list
        while (slow->next != fast->next) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    // Step 4: Remove the loop
    fast->next = nullptr;
}

// Helper function to print the linked list
void printList(Node* head) {
    while (head) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

// Helper function to create a loop in the linked list
void createLoop(Node* head, int pos) {
    if (pos == 0) return;
    Node* loopNode = head;
    for (int i = 1; i < pos && loopNode != nullptr; i++) {
        loopNode = loopNode->next;
    }
    Node* tail = head;
    while (tail->next) {
        tail = tail->next;
    }
    tail->next = loopNode;
}

// Main function to test the code
int main() {
    Node* head = new Node(1);
    head->next = new Node(3);
    head->next->next = new Node(4);
    head->next->next->next = new Node(5);
    head->next->next->next->next = new Node(6);

    createLoop(head, 2);  // Creating a loop at position 2

    removeLoop(head);  // Removing the loop if present
    printList(head);   // Printing the list to verify the loop is removed

    return 0;
}
