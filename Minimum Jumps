#include <vector>
#include <algorithm>
using namespace std;

int minJumps(vector<int>& arr) {
    int n = arr.size();

    // If the array has only one element, no jumps are needed.
    if (n <= 1) 
        return 0;
    
    // If the first element is 0, we can't move, so return -1.
    if (arr[0] == 0) 
        return -1;
    
    int maxReach = arr[0];  // Maximum index we can reach so far
    int steps = arr[0];     // Steps we can still take in the current jump
    int jumps = 1;          // Number of jumps made so far

    // Traverse the array
    for (int i = 1; i < n; i++) {
        // If we have reached the end of the array
        if (i == n - 1)
            return jumps;

        // Update maxReach
        maxReach = max(maxReach, i + arr[i]);

        // Use a step to move forward
        steps--;

        // If no steps are left
        if (steps == 0) {
            // We must jump
            jumps++;
            
            // If current index is greater than or equal to maxReach, we cannot move further
            if (i >= maxReach)
                return -1;
            
            // Reinitialize steps to the number of steps to reach maxReach from position i
            steps = maxReach - i;
        }
    }
    return -1;
}
